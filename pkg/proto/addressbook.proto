syntax = "proto3";

package addressbook;
option go_package = "./proto";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "pkg/protoc-gen-validate/validate/validate.proto"; 
import "protoc-gen-openapiv2/options/annotations.proto";



option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "AddressBook API",
    version: "1.0",
    description: "API for managing an address book."
  },
  schemes: [HTTP, HTTPS],  
  consumes: ["application/json"],
  produces: ["application/json"],
  responses: {
    key: "400",
    value: {
      description: "Invalid input",
      schema: {
        json_schema: {
          type: STRING
        }
      }
    }
  }

};
message User {
  string userId = 1 [(validate.rules).string = {
    min_len: 1,
    pattern: "^[0-9]+$" 
  }];
  string username = 2 [(validate.rules).string = {
    min_len: 3,
    pattern: "^[a-zA-Z0-9_]+$" 
  }];
  string address = 3 [(validate.rules).string.min_len = 1];
  string phone = 4 [(validate.rules).string = {
    min_len: 10,
    max_len: 10,
    pattern: "^[0-9]{10}$"  
  }];
}

service AddressBook {
  rpc AddUser(AddUserRequest) returns (AddUserResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "user"
    };
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/users/{userId}"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/users/{userId}"
      body: "user"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/users/{userId}"
    };
  }

  rpc ListUsers(google.protobuf.Empty) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/users"
    };
  }
}

message AddUserRequest {
  User user = 1 [(validate.rules).message.required = true];
}

message AddUserResponse {
  User user = 1;
}

message GetUserRequest {
  string userId = 1 [(validate.rules).string.min_len = 1];
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string userId = 1 [(validate.rules).string.min_len = 1];
  User user = 2 [(validate.rules).message.required = true];
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string userId = 1 [(validate.rules).string.min_len = 1];
}

message ListUsersResponse {
  repeated User users = 1;
}